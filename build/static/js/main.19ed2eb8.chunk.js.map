{"version":3,"sources":["App.js","index.js"],"names":["speechsdk","require","App","props","state","displayText","$","ajax","url","beforeSend","xhrObj","setRequestHeader","type","data","done","sessionStorage","setItem","speechRegion","fail","err","alert","getItem","this","setState","tokenObj","authRegion","split","authToken","speechConfig","SpeechConfig","fromAuthorizationToken","speechRecognitionLanguage","audioConfig","AudioConfig","fromMicrophoneInput","recognizer","SpeechRecognizer","recognizeOnceAsync","result","reason","ResultReason","RecognizedSpeech","text","replace","Container","className","onClick","sttFromMic","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oaAMMA,EAAYC,EAAQ,KAGLC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,wCAJF,E,0KAUM,SACrBC,IAAEC,KAAK,CACHC,IAAK,iEACLC,WAAY,SAASC,GAEjBA,EAAOC,iBAAiB,eAAe,qCACvCD,EAAOC,iBAAiB,4BAA4B,qCAExDC,KAAM,OAENC,KAAM,kBAETC,MAAK,SAASD,GAEXE,eAAeC,QAAQ,eAAgBC,UAAiBJ,MAG3DK,MAAK,SAASC,GACXC,MAAM,WAAWD,MAMJ,OAFFJ,eAAeM,QAAQ,iBAGlCC,KAAKC,SAAS,CACVlB,YAAa,oD,0QAOjBmB,EAAWT,eAAeM,QAAQ,gBAClCI,EAAaD,EAASE,MAAM,KAAK,GACjCC,EAAYH,EAASE,MAAM,KAAK,IAC9BE,EAAe5B,EAAU6B,aAAaC,uBAAuBH,EAAWF,IACjEM,0BAA4B,QAEnCC,EAAchC,EAAUiC,YAAYC,sBAEpCC,EAAa,IAAInC,EAAUoC,iBAAiBR,EAAcI,GAEhEV,KAAKC,SAAS,CACVlB,YAAa,kCAGjB8B,EAAWE,oBAAmB,SAAAC,GAC1B,IAAIjC,EAEAA,EADAiC,EAAOC,SAAWC,IAAaC,iBACpB,wBAAqBH,EAAOI,KAAMC,QAAQ,MAAO,KAE9C,sGAGlB,EAAKpB,SAAS,CACVlB,YAAaA,O,qIAKf,IAAD,OACL,OACI,eAACuC,EAAA,EAAD,CAAWC,UAAU,gBAArB,UACI,oBAAIA,UAAU,iBAAd,oCAEA,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,QAAf,UACI,mBAAGA,UAAU,+BAA+BC,QAAS,kBAAM,EAAKC,gBADpE,gCAMA,qBAAKF,UAAU,+BAAf,SACI,+BAAOvB,KAAKlB,MAAMC,0B,GArFT2C,aCJjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.19ed2eb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport $ from 'jquery';\r\nimport './custom.css'\r\nimport { ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\r\n\r\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk')\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayText: 'INITIALIZED: ready to test speech...'\r\n        }\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        // check for valid speech key/region\r\n        const speechRegion = 'eastus';\r\n        $.ajax({\r\n            url: \"https://eastus.api.cognitive.microsoft.com/sts/v1.0/issuetoken\",\r\n            beforeSend: function(xhrObj){\r\n                // Request headers\r\n                xhrObj.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\r\n                xhrObj.setRequestHeader(\"Ocp-Apim-Subscription-Key\",\"0fd7e229d17b44a788e4efce5e3aedf3\");\r\n            },\r\n            type: \"POST\",\r\n            // Request body\r\n            data: '{ \"url\": \"#\"}'\r\n        })\r\n        .done(function(data) {\r\n            // Put the object into storage\r\n            sessionStorage.setItem('speech-token', speechRegion+':'+data);\r\n\r\n        })\r\n        .fail(function(err) {\r\n            alert(\"error : \"+err);\r\n        });\r\n\r\n        // Retrieve the object from storage\r\n        var tokenRes = sessionStorage.getItem('speech-token');\r\n\r\n        if (tokenRes === null) {\r\n            this.setState({\r\n                displayText: 'Press the microphone icon for voice recognition'\r\n            });\r\n        }\r\n       \r\n    }\r\n\r\n    async sttFromMic() {\r\n        var tokenObj = sessionStorage.getItem('speech-token');\r\n        var authRegion = tokenObj.split(':')[0];\r\n        var authToken = tokenObj.split(':')[1];\r\n        const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(authToken, authRegion);\r\n        speechConfig.speechRecognitionLanguage = 'en-US';\r\n        \r\n        const audioConfig = speechsdk.AudioConfig.fromMicrophoneInput();\r\n       \r\n        const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n        this.setState({\r\n            displayText: 'speak into your microphone...'\r\n        });\r\n\r\n        recognizer.recognizeOnceAsync(result => {\r\n            let displayText;\r\n            if (result.reason === ResultReason.RecognizedSpeech) {\r\n                displayText = `Spoken Text : ${(result.text).replace(/\\./g, \"\")}`\r\n            } else {\r\n                displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\r\n            }\r\n\r\n            this.setState({\r\n                displayText: displayText\r\n            });\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Container className=\"app-container\">\r\n                <h1 className=\"display-4 mb-3\">Voice Recognition Demo</h1>\r\n\r\n                <div className=\"row main-container\">\r\n                    <div className=\"col-6\">\r\n                        <i className=\"fas fa-microphone fa-lg mr-2\" onClick={() => this.sttFromMic()}></i>\r\n                        Speak (Press the mic icon)\r\n                        \r\n                        \r\n                    </div>\r\n                    <div className=\"col-6 output-display rounded\">\r\n                        <code>{this.state.displayText}</code>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}